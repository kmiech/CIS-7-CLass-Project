/*Seth, George, Chris
Vigenere Ciphere Project*/
#include <iostream>
#include <string>
using namespace std;

string keymaker(string, string);
string en_crypt(string, string);
string de_crypt(string, string);

int main()
{
	char choice;
  string user_msg, user_key, sec_msg, sec_key, encrypt, makekey;

	cout << "  .____.                .__.       ____/\\__  .____..__.                   \n";
	cout << "  |    |    ____   ___  |  | __.  /   / /_/  |    |/ _|____ __.__.         \n";
	cout << "  |    |   /  _ \\_/ __\\ |  |/ /   \\__/ /_ \\  |      <_/ __ (  |  |     \n";
	cout << "  |    |__(  (_) )  \\___|    (    / / /__) ) |    |  \\  __/\\___  |      \n";
	cout << "  |_______ \\____/ \\___  }__|_ \\  /_/ /__  /  |____|__ \\__  > ____|     \n";
	cout << "          \\/          \\/     \\/    \\/   \\/           \\/  \\/\\/    \n\n";
	cout << "                            A G.C.K. Program                           \n\n\n";

	do
	{
		cout << "              ___________________________________________  \n";
		cout << "             | Please select from the following options. | \n";
		cout << "             |===========================================| \n";
		cout << "             | 1)-------- Encrypt a message.             | \n";
		cout << "             | 2)-------- Decrypt a message.             | \n";
		cout << "             | 3)-------- Exit the program.              | \n";
		cout << "             |___________________________________________| \n\n";
		cout << "                        ***  Enter choice  ***           ";
		cin >> choice;
		cin.ignore();

		while ((choice < '1') || (choice > '3'))
		{
			cout << "              ___________________________________________  \n";
			cout << "             |        That is not a valid option.        | \n";
			cout << "             |           Please choose again.            | \n";
			cout << "             |___________________________________________| \n\n";
			cout << "                        ***  Enter choice  ***           ";
			cin >> choice;
			cin.ignore();
		}

		if (choice == '1')
		{
			cout << "              ___________________________________________  \n";
			cout << "             |      Enter message to be encrypted:       | \n";
			cout << "             |___________________________________________| \n\n --> ";
			getline(cin, user_msg);

			cout << "              ___________________________________________  \n";
			cout << "             |      Enter a key word for encryption:     | \n";
			cout << "             |___________________________________________| \n\n --> ";
			getline(cin, user_key);

			makekey = keymaker(user_msg, user_key);
			encrypt = en_crypt(user_msg, makekey);

			cout << "\n  Your key for this message is: \n  --> " << makekey << endl;
			cout << "\n  Your encrypted message is: \n  --> " << encrypt << endl << endl;
		}

		else if (choice == '2')
		{
		
			if (user_msg.length() > 0)
			{
				cout << "              ___________________________________________  \n";
				cout << "             |      What would you like to decrypt?      | \n";
				cout << "             |===========================================| \n";
				cout << "             | 1) Decrypt last message.                  | \n";
				cout << "             | 2) Input a message for decryption.        | \n";
				cout << "             |___________________________________________|\n\n";
				cout << "                        ***  Enter choice  ***           ";
				cin >> choice;
				cin.ignore();

				while ((choice < '1') || (choice > '2'))
				{
					cout << "              ___________________________________________  \n";
					cout << "             |        That is not a valid option.        | \n";
					cout << "             |           Please choose again.            | \n";
					cout << "             |___________________________________________| \n\n";
					cout << "                        ***  Enter choice  ***           ";
					cin >> choice;
					cin.ignore();
				}

				if (choice == '1')
				{
					cout << "\n  The key for this message is: \n  --> " << makekey << endl;
					cout << "\n  The decrypted msg is: \n  --> " << de_crypt(encrypt, makekey) << endl << endl;
				}

				else
				{
					cout << "              ___________________________________________  \n";
					cout << "             |      Enter message to be decrypted:       | \n";
					cout << "             |___________________________________________| \n\n --> ";
					getline(cin, sec_msg);
					
					cout << "              ___________________________________________  \n";
					cout << "             |      Enter key word for decryption:       | \n";
					cout << "             |___________________________________________| \n\n --> ";
					getline(cin, sec_key);

					cout << "\n  Your decrypted message is: \n  --> " << de_crypt(sec_msg, keymaker(sec_msg, sec_key)) << endl << endl;
				}
			}

			else
			{	
				cout << "              ___________________________________________  \n";
				cout << "             |      Enter message to be decrypted:       | \n";
				cout << "             |___________________________________________| \n\n --> ";
				getline(cin, sec_msg);
					
				cout << "              ___________________________________________  \n";
				cout << "             |      Enter key word for decryption:       | \n";
				cout << "             |___________________________________________| \n\n --> ";
				getline(cin, sec_key);
				
				cout << "\n  Your decrypted message is: \n  --> " << de_crypt(sec_msg, keymaker(sec_msg, sec_key)) << endl << endl;
			}
		}

		else
		{
			cout << "              ___________________________________________  \n";
			cout << "             |  ******** THANK YOU FOR USING **********  | \n";
			cout << "             |___________________________________________| \n\n";
			cout << "  .____.                .__.       ____/\\__  .____..__.                   \n";
			cout << "  |    |    ____   ___  |  | __.  /   / /_/  |    |/ _|____ __.__.         \n";
			cout << "  |    |   /  _ \\_/ __\\ |  |/ /   \\__/ /_ \\  |      <_/ __ (  |  |     \n";
			cout << "  |    |__(  (_) )  \\___|    (    / / /__) ) |    |  \\  __/\\___  |      \n";
			cout << "  |_______ \\____/ \\___  }__|_ \\  /_/ /__  /  |____|__ \\__  > ____|     \n";
			cout << "          \\/          \\/     \\/    \\/   \\/           \\/  \\/\\/    \n\n";
			cout << "                            A G.C.K. Program                           \n\n\n";
		}

	} while (choice != '3'); //sentinel to end do-while loop

	system("pause");
	return 0;
}

string en_crypt(string msg, string key)
{
  string tmp_encrypt;
  for (int i = 0; i < msg.length(); i++)
  {
  
      int tmp = (msg[i] + key[i] +21) % 95;
    
    tmp += ' ';
   
    tmp_encrypt.push_back(tmp);
  }
  return tmp_encrypt;
}

string de_crypt(string msg, string key)
{
  string tmp_decrypt;
  for (int i = 0; i < msg.length(); i++)
  {
    int tmp = (msg[i] - key[i] + 200) % 95 ;

    tmp += ' ';
  
    tmp_decrypt.push_back(tmp);
  }
  return tmp_decrypt;
}
string keymaker(string msg, string key)
{
	int tmp = msg.length();

	for (int i = 0; i < msg.length(); i++)
	{
		if (tmp == i)
			i = 0;
		if (key.length() == msg.length())
		{
			break;
		}
		if (key.length() < msg.length())
		{
			key.push_back(key[i]);
		}
		if (key.length() > msg.length())
			key.pop_back();
	}
	return key;
}
